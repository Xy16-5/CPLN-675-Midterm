DProb <-predict(cvFit,D.model_var_net,type="response")
View(floodModel)
floodModel[["R"]]
View(testProbs)
D.model_var_net <-
d_vars_net%>%
dplyr::select(elevatn, gntlSlp, mainBsn,resist,ndvi)
D.model_var_net$mainBsn<-as.factor(D.model_var_net$mainBsn)
DProb <-predict(floodModel,D.model_var_net,type="response")
Denver_flood<-
cbind(D.model_var_net,DProb)%>%
mutate(allPredictions = round(DProb * 10e8))
ggplot() +
geom_sf(data=Denver_flood, aes(fill=factor(ntile(allPredictions,5))), colour=NA) +
scale_fill_manual(values = c("#edf8fb","#b3cde3","#8c96c6","#8856a7","#810f7c"),
labels=as.character(quantile(Denver_flood$allPredictions,
c(0.1,.2,.4,.6,.8),na.rm=T)),
name="Predicted\nProbabilities(%)\n(Quintile\nBreaks)") +
mapTheme() +
labs(title="")
View(model_var_net)
c_final <-
model_var_net %>%
mutate(elevation = (elevatn-min(elevatn))/(max(elevatn)-min(elevatn))) %>%
mutate(slopee = (slope-min(slope))/(max(slope)-min(slope))) %>%
mutate(gntlslope = (gntlSlp-min(gntlSlp))/(max(gntlSlp)-min(gntlSlp))) %>%
mutate(stepslope = (stepSlp-min(stepSlp))/(max(stepSlp)-min(stepSlp)))
set.seed(3456)
trainIndex <-createDataPartition(c_final$mainBsn , p=.70 ,
list=FALSE,
times=1)
modelTrain<-c_final[trainIndex,]
modelTest <-c_final[-trainIndex,]
View(modelTrain)
floodModel <- glm(flood ~.,family = "binomial"(link="logit"),
data= modelTrain %>%
as.data.frame() %>%
dplyr::select(-geometry))
c_final <-
model_var_net %>%
mutate(elevation = (elevatn-min(elevatn))/(max(elevatn)-min(elevatn))) %>%
mutate(slopee = (slope-min(slope))/(max(slope)-min(slope))) %>%
mutate(gntlslope = (gntlSlp-min(gntlSlp))/(max(gntlSlp)-min(gntlSlp))) %>%
mutate(stepslope = (stepSlp-min(stepSlp))/(max(stepSlp)-min(stepSlp))) %>%
dplyr::select(-elevatn,-slope,-gntlSlp,-stepSlp)
View(c_final)
c_final <-
model_var_net %>%
filter(is.na()==FALSE)
c_final <-
model_var_net %>%
filter(is.na(elevatn)==FALSE & is.na(slope)==FALSE)
mutate(elevation = (elevatn-min(elevatn))/(max(elevatn)-min(elevatn))) %>%
mutate(slopee = (slope-min(slope))/(max(slope)-min(slope))) %>%
mutate(gntlslope = (gntlSlp-min(gntlSlp))/(max(gntlSlp)-min(gntlSlp))) %>%
mutate(stepslope = (stepSlp-min(stepSlp))/(max(stepSlp)-min(stepSlp))) %>%
dplyr::select(-elevatn,-slope,-gntlSlp,-stepSlp)
model_var_net <-cbind(c_vars_net,c_flood_net)%>%
dplyr::select(elevatn,
slope, gntlSlp, stepSlp,
gntlS_1, gntlS_2, gntlS_3,
stpSl_1, stpSl_2, stpSl_3,
mainBsn,
dwnst_1, dwnst_2, dwnst_3,resist,ndvi,c_flood) %>%
rename (flood = c_flood)
model_var_net$mainBsn <- as.factor(model_var_net$mainBsn)
c_final <-
model_var_net %>%
filter(is.na(elevatn)==FALSE & is.na(slope)==FALSE)
mutate(elevation = (elevatn-min(elevatn))/(max(elevatn)-min(elevatn))) %>%
mutate(slopee = (slope-min(slope))/(max(slope)-min(slope))) %>%
mutate(gntlslope = (gntlSlp-min(gntlSlp))/(max(gntlSlp)-min(gntlSlp))) %>%
mutate(stepslope = (stepSlp-min(stepSlp))/(max(stepSlp)-min(stepSlp))) %>%
dplyr::select(-elevatn,-slope,-gntlSlp,-stepSlp)
c_final <-
model_var_net %>%
filter(is.na(elevatn)==FALSE & is.na(slope)==FALSE)
mutate(elevation = (elevatn-min(elevatn))/(max(elevatn)-min(elevatn))) %>%
mutate(slopee = (slope-min(slope))/(max(slope)-min(slope))) %>%
mutate(gntlslope = (gntlSlp-min(gntlSlp))/(max(gntlSlp)-min(gntlSlp))) %>%
mutate(stepslope = (stepSlp-min(stepSlp))/(max(stepSlp)-min(stepSlp))) %>%
dplyr::select(-elevatn,-slope,-gntlSlp,-stepSlp)
c_final <-
model_var_net %>%
filter(is.na(elevatn)==FALSE & is.na(slope)==FALSE)%>%
mutate(elevation = (elevatn-min(elevatn))/(max(elevatn)-min(elevatn))) %>%
mutate(slopee = (slope-min(slope))/(max(slope)-min(slope))) %>%
mutate(gntlslope = (gntlSlp-min(gntlSlp))/(max(gntlSlp)-min(gntlSlp))) %>%
mutate(stepslope = (stepSlp-min(stepSlp))/(max(stepSlp)-min(stepSlp))) %>%
dplyr::select(-elevatn,-slope,-gntlSlp,-stepSlp)
set.seed(3456)
trainIndex <-createDataPartition(c_final$mainBsn , p=.70 ,
list=FALSE,
times=1)
modelTrain<-c_final[trainIndex,]
modelTest <-c_final[-trainIndex,]
floodModel <- glm(flood ~.,family = "binomial"(link="logit"),
data= modelTrain %>%
as.data.frame() %>%
dplyr::select(-geometry))
summary(floodModel)
c_final2 <-
c_final %>%
dplyr::select (gntlS_3,dwnst_3 ,resist,ndvi,elevation,gntlslope,mainBsn,flood)
modelTrain<-c_final2[trainIndex,]
modelTest <-c_final2[-trainIndex,]
floodModel <- glm(flood ~.,family = "binomial"(link="logit"),
data= modelTrain %>%
as.data.frame() %>%
dplyr::select(-geometry))
summary(floodModel)
step(floodModel)
c_final3 <-
c_final %>%
dplyr::select (gntlS_3,resist,ndvi,elevation,gntlslope,mainBsn,flood)
modelTrain<-c_final3[trainIndex,]
modelTest <-c_final3[-trainIndex,]
floodModel <- glm(flood ~.,family = "binomial"(link="logit"),
data= modelTrain %>%
as.data.frame() %>%
dplyr::select(-geometry))
summary(floodModel)
stargazer(floodModel,title="Flood Prediction Model Results",align=TRUE,type='text')
c_plot_vars<-
model_var_net %>%
as.data.frame() %>%
dplyr::select(flood,elevatn,gntlSlp,resist,ndvi,gntlS_3) %>%
gather(key,value,elevatn:ndvi) %>%
mutate(value= ifelse(key=="resist",value*1000,
ifelse(key=="ndvi", value*5000,
ifelse(key=="gntlSlp",value*10,value))))
ggplot(c_plot_vars, aes(as.factor(flood),value, fill=as.factor(flood)))+
geom_bar(stat="identity")+
facet_wrap(~key)+
scale_fill_manual(values=c("grey","darkred"),
labels = c("No Inundation","Inundation"),
name="")+
labs(x="Flood",y="Value")
View(c_plot_vars)
c_plot_vars<-
model_var_net %>%
as.data.frame() %>%
dplyr::select(flood,elevatn,gntlSlp,resist,ndvi,gntlS_3) %>%
gather(key,value,elevatn:gntlS_e) %>%
mutate(value= ifelse(key=="resist",value*1000,
ifelse(key=="ndvi", value*5000,
ifelse(key=="gntlSlp",value*10,value))))
c_plot_vars<-
model_var_net %>%
as.data.frame() %>%
dplyr::select(flood,elevatn,gntlSlp,resist,ndvi,gntlS_3) %>%
gather(key,value,elevatn:gntlS_3) %>%
mutate(value= ifelse(key=="resist",value*1000,
ifelse(key=="ndvi", value*5000,
ifelse(key=="gntlSlp",value*10,value))))
ggplot(c_plot_vars, aes(as.factor(flood),value, fill=as.factor(flood)))+
geom_bar(stat="identity")+
facet_wrap(~key)+
scale_fill_manual(values=c("grey","darkred"),
labels = c("No Inundation","Inundation"),
name="")+
labs(x="Flood",y="Value")
classProbs <- predict (floodModel , modelTest,type='response')
testProbs <- data.frame (obs = as.numeric(modelTest$flood),pred = classProbs)
ggplot(testProbs, aes(x=pred, fill = as.factor(obs)))+
geom_density()+
facet_grid(obs~.) + xlab('Probability') + geom_vline(xintercept = .5) +
scale_fill_manual(values = c("grey", "dark red"),
labels = c("No Inundation","Inundation"),
name = "")
pred<-prediction(testProbs[is.na(testProbs$pred)==FALSE,]$pred,testProbs[is.na(testProbs$pred)==FALSE,]$obs)
f.perf<-performance(pred,"f")
plot(f.perf)
F.score <-c(f.perf@y.values[[1]])
cutoff<-c(f.perf@x.values[[1]])
F.score_table<-data.frame(cbind(F.score,cutoff))
F.score_table[which.max(F.score_table$F.score),]
testProbs$predClass  = ifelse(testProbs$pred > .438 ,1,0)
caret::confusionMatrix(reference = as.factor(testProbs$obs),
data = as.factor(testProbs$predClass),
positive = "1")
ggplot(testProbs, aes(d = obs, m = pred)) +
geom_roc(n.cuts = 50, labels = FALSE) +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey')
auc(testProbs$obs, testProbs$pred)
ctrl <- trainControl(method = "cv",
number = 100,
classProbs=TRUE,
savePredictions = TRUE,summaryFunction=twoClassSummary)
cvFit <- train(as.factor(flood) ~ .,  data = c_final3 %>%
as.data.frame() %>%
dplyr::select(-geometry)%>%
mutate(flood = ifelse(flood==1,'yes','no')),
method="glm", family="binomial",
metric="ROC",
trControl = ctrl,
na.action=na.exclude)
cvFit
dplyr::select(cvFit$resample, -Resample) %>%
gather(metric, value) %>%
left_join(gather(cvFit$results[2:4], metric, mean)) %>%
ggplot(aes(value)) +
geom_histogram(bins=35, fill = "#FF006A") +
facet_wrap(~metric) +
geom_vline(aes(xintercept = mean), colour = "#981FAC", linetype = 3, size = 1.5) +
scale_x_continuous(limits = c(0, 1)) +
labs(x="Goodness of Fit", y="Count", title="CV Goodness of Fit Metrics for Flood Inundation Model",
subtitle = "Across-fold mean reprented as dotted lines")
cvFit$results
allPredictions<-
predict(cvFit, c_final3,type="prob")[,2]
c_final3<-
cbind(c_final3,allPredictions)%>%
mutate(allPredictions=round(allPredictions*100))
ggplot() +
geom_sf(data=c_final3, aes(fill=factor(ntile(allPredictions,5))), colour=NA) +
scale_fill_manual(values = c("#edf8fb","#b3cde3","#8c96c6","#8856a7","#810f7c"),
labels=as.character(quantile(c_final3$allPredictions,
c(0.1,.2,.4,.6,.8),na.rm=T)),
name="Predicted\nProbabilities(%)\n(Quintile\nBreaks)") +
mapTheme() +
labs(title="Predicted Probabilities of Flood Inundation in Calgary")
View(c_final3)
ggplot() +
geom_sf(data=c_final3, aes(fill=factor(ntile(allPredictions,5))), colour=NA) +
scale_fill_manual(values = c("#edf8fb","#b3cde3","#8c96c6","#8856a7","#810f7c"),
labels=as.character(quantile(c_final3$allPredictions,
c(0.1,.2,.4,.6,.8),na.rm=T)),
name="Predicted\nProbabilities(%)\n(Quintile\nBreaks)") +
geom_sf(data=c_flood_net %>%
filter(c_flood == 1),
fill="red",colour=NA) +
mapTheme() +
labs(title="Predicted Probabilities and Past Flood",
subtitle="Calgary: Past flood in red")
ggplot() +
geom_sf(data=c_final3, aes(fill=factor(ntile(allPredictions,5))), colour=NA) +
scale_fill_manual(values = c("#edf8fb","#b3cde3","#8c96c6","#8856a7","#810f7c"),
labels=as.character(quantile(c_final3$allPredictions,
c(0.1,.2,.4,.6,.8),na.rm=T)),
name="Predicted\nProbabilities(%)\n(Quintile\nBreaks)") +
geom_sf(data=c_flood_net %>%
filter(c_flood == 1),
fill="red",colour=NA) +
mapTheme() +
labs(title="Predicted Probabilities and Past Flood",
subtitle="Calgary: Past flood in red")
View(modelTrain)
trainProbs <-predict(cvFit,modelTrain,type="prob")[,2]
Train_confusionmatrix<-
cbind(modelTrain,trainProbs) %>%
mutate(trainProbs = round(trainProbs*100)) %>%
mutate(predict_flood = ifelse (trainProbs > 43.8,1,0)) %>%
mutate(confusion_matrix =
ifelse(predict_flood==1 & flood ==1, "True_Positive",
ifelse(predict_flood==1 & flood ==0,"False_Positive",
ifelse(predict_flood==0 & flood ==0, "True_Negative",
ifelse(predict_flood==0 & flood ==1, "False_Negative",0)))))
ggplot()+
geom_sf(data=Train_confusionmatrix, aes(fill=factor(confusion_matrix)),color=NA) +
scale_fill_manual(values=c("red","lightskyblue","grey","royalblue"),
labels=c("False Negative","False Positive","True Negative","True Positive"),
name = "Confusion Matrix for Traning Set")+
mapTheme()
c_predict_flood<-
c_final3 %>%
mutate(predict_flood = ifelse(allPredictions>43.8,1,0))
ggplot()+
geom_sf(data=c_predict_flood, aes(fill=factor(predict_flood)),color=NA)+
scale_fill_manual(values = c("grey","darkred"),
labels=c("No Inundation","Inundation"),
name="Flood Prediction")+
mapTheme()
View(d_vars_net)
D.model_var_net <-
d_vars_net%>%
dplyr::select(gntlS_3,resist,ndvi,elevatn,gntlSlp,mainBsn)%>%
mutate(elevation = (elevatn-min(elevatn))/(max(elevatn)-min(elevatn))) %>%
mutate(gntlslope = (gntlSlp-min(gntlSlp))/(max(gntlSlp)-min(gntlSlp))) %>%
dplyr::select(-elevatn,-gntlSlp)
D.model_var_net$mainBsn<-as.factor(D.model_var_net$mainBsn)
DProb <-predict(floodModel,D.model_var_net,type="response")
Denver_flood<-
cbind(D.model_var_net,DProb)%>%
mutate(allPredictions = round(DProb * 100))
ggplot() +
geom_sf(data=Denver_flood, aes(fill=factor(ntile(allPredictions,5))), colour=NA) +
scale_fill_manual(values = c("#edf8fb","#b3cde3","#8c96c6","#8856a7","#810f7c"),
labels=as.character(quantile(Denver_flood$allPredictions,
c(0.1,.2,.4,.6,.8),na.rm=T)),
name="Predicted\nProbabilities(%)\n(Quintile\nBreaks)") +
mapTheme() +
labs(title="")
View(Denver_flood)
D.model_var_net <-
d_vars_net%>%
dplyr::select(gntlS_3,resist,ndvi,elevatn,gntlSlp,mainBsn)%>%
mutate(elevation = (elevatn-min(elevatn))/(max(elevatn)-min(elevatn))) %>%
mutate(gntlslope = (gntlSlp-min(gntlSlp))/(max(gntlSlp)-min(gntlSlp))) %>%
dplyr::select(-elevatn,-gntlSlp)
D.model_var_net$mainBsn<-as.factor(D.model_var_net$mainBsn)
DProb <-predict(floodModel,D.model_var_net,type="response")
Denver_flood<-
cbind(D.model_var_net,DProb)%>%
mutate(allPredictions = round(DProb * 100)) %>%
mutate(allPredictions,ifelse(is.na(allPredictions)==FALSE,allPredictions,0))
ggplot() +
geom_sf(data=Denver_flood, aes(fill=factor(ntile(allPredictions,5))), colour=NA) +
scale_fill_manual(values = c("#edf8fb","#b3cde3","#8c96c6","#8856a7","#810f7c"),
labels=as.character(quantile(Denver_flood$allPredictions,
c(0.1,.2,.4,.6,.8),na.rm=T)),
name="Predicted\nProbabilities(%)\n(Quintile\nBreaks)") +
mapTheme() +
labs(title="")
D.model_var_net <-
d_vars_net%>%
dplyr::select(gntlS_3,resist,ndvi,elevatn,gntlSlp,mainBsn)%>%
mutate(elevation = (elevatn-min(elevatn))/(max(elevatn)-min(elevatn))) %>%
mutate(gntlslope = (gntlSlp-min(gntlSlp))/(max(gntlSlp)-min(gntlSlp))) %>%
dplyr::select(-elevatn,-gntlSlp)
D.model_var_net$mainBsn<-as.factor(D.model_var_net$mainBsn)
DProb <-predict(floodModel,D.model_var_net,type="response")
Denver_flood<-
cbind(D.model_var_net,DProb)%>%
mutate(allPredictions = round(DProb * 100)) %>%
mutate(allPredictions=ifelse(is.na(allPredictions)==FALSE,allPredictions,0))
ggplot() +
geom_sf(data=Denver_flood, aes(fill=factor(ntile(allPredictions,5))), colour=NA) +
scale_fill_manual(values = c("#edf8fb","#b3cde3","#8c96c6","#8856a7","#810f7c"),
labels=as.character(quantile(Denver_flood$allPredictions,
c(0.1,.2,.4,.6,.8),na.rm=T)),
name="Predicted\nProbabilities(%)\n(Quintile\nBreaks)") +
mapTheme() +
labs(title="")
D.model_var_net <-
d_vars_net%>%
dplyr::select(gntlS_3,resist,ndvi,elevatn,gntlSlp,mainBsn)%>%
mutate(elevation = (elevatn-min(elevatn))/(max(elevatn)-min(elevatn))) %>%
mutate(gntlslope = (gntlSlp-min(gntlSlp))/(max(gntlSlp)-min(gntlSlp))) %>%
dplyr::select(-elevatn,-gntlSlp)
D.model_var_net$mainBsn<-as.factor(D.model_var_net$mainBsn)
DProb <-predict(floodModel,D.model_var_net,type="response")
Denver_flood<-
cbind(D.model_var_net,DProb)%>%
mutate(allPredictions = round(DProb * 100)) %>%
mutate(allPredictions=ifelse(is.na(allPredictions)==FALSE,allPredictions,0))
ggplot() +
geom_sf(data=Denver_flood, aes(fill=factor(ntile(allPredictions,5))), colour=NA) +
scale_fill_manual(values = c("#edf8fb","#b3cde3","#8c96c6","#8856a7","#810f7c"),
labels=as.character(quantile(Denver_flood$allPredictions,
c(0.1,.2,.4,.6,.8),na.rm=T)),
name="Predicted\nProbabilities(%)\n(Quintile\nBreaks)") +
mapTheme() +
labs(title="")
d_predict_flood<-
Denver_flood %>%
mutate(predict_flood = ifelse(allPredictions>43.8,1,0))
ggplot()+
geom_sf(data=d_predict_flood, aes(fill=factor(predict_flood)),color=NA)+
scale_fill_manual(values = c("grey","darkred"),
labels=c("No Inundation","Inundation"),
name="Flood Prediction")+
mapTheme()
library(dplyr)
library(tidyverse)
library(sf)
library(RSocrata)
library(viridis)
library(caret)
library(spatstat)
library(spdep)
library(FNN)
library(grid)
library(gridExtra)
library(knitr)
library(kableExtra)
library(plotROC)
library(ROCR)
library(pROC)
library(raster)
library(stargazer)
# Gillian's working directory
#setwd("G:\\UPenn\\CPLN675_LandUse_and_EnvironmentalModeling\\midterm\\CPLN-675-Midterm")
# Xinyi's working directory
setwd("/Users/xinyi/Desktop/Courses/Land Use and Environmental Modeling/Midterm/task 4 Building Model")
# Nearest neighbor function
nn_function <- function(measureFrom,measureTo,k) {
measureFrom_Matrix <-
as.matrix(measureFrom)
measureTo_Matrix <-
as.matrix(measureTo)
nn <-
get.knnx(measureTo, measureFrom, k)$nn.dist
output <-
as.data.frame(nn) %>%
rownames_to_column(var = "thisPoint") %>%
gather(points, point_distance, V1:ncol(.)) %>%
arrange(as.numeric(thisPoint)) %>%
group_by(thisPoint) %>%
summarize(pointDistance = mean(point_distance)) %>%
arrange(as.numeric(thisPoint)) %>%
dplyr::select(-thisPoint) %>%
pull()
return(output)
}
# Map theme for maps
mapTheme <- function(base_size = 12) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = 14,colour = "black"),
plot.subtitle=element_text(face="italic"),
plot.caption=element_text(hjust=0),
plot.background = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank(),axis.title = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.minor = element_blank(),
)
}
# Color for ggplots
## Calgary
c_colors_hex <- c("#4a6fa5", "#dbe9ee")
names(c_colors_hex) <- c("land", "stream")
## Denver
d_colors_hex <- c("#4f6d7a", "#c0d6df")
names(d_colors_hex) <- c("land", "stream")
d_predict_flood<-
Denver_flood %>%
mutate(predict_flood = ifelse(allPredictions>43.8,1,0))
ggplot()+
geom_sf(data=d_predict_flood, aes(fill=factor(predict_flood)),color=NA)+
scale_fill_manual(values = c("grey","darkred"),
labels=c("No Inundation","Inundation"),
name="Flood Prediction")+
mapTheme()
library(dplyr)
library(tidyverse)
library(sf)
library(RSocrata)
library(viridis)
library(caret)
library(spatstat)
library(spdep)
library(FNN)
library(grid)
library(gridExtra)
library(knitr)
library(kableExtra)
library(plotROC)
library(ROCR)
library(pROC)
library(raster)
library(stargazer)
# Gillian's working directory
#setwd("G:\\UPenn\\CPLN675_LandUse_and_EnvironmentalModeling\\midterm\\CPLN-675-Midterm")
# Xinyi's working directory
setwd("/Users/xinyi/Desktop/Courses/Land Use and Environmental Modeling/Midterm/task 4 Building Model")
# Nearest neighbor function
nn_function <- function(measureFrom,measureTo,k) {
measureFrom_Matrix <-
as.matrix(measureFrom)
measureTo_Matrix <-
as.matrix(measureTo)
nn <-
get.knnx(measureTo, measureFrom, k)$nn.dist
output <-
as.data.frame(nn) %>%
rownames_to_column(var = "thisPoint") %>%
gather(points, point_distance, V1:ncol(.)) %>%
arrange(as.numeric(thisPoint)) %>%
group_by(thisPoint) %>%
summarize(pointDistance = mean(point_distance)) %>%
arrange(as.numeric(thisPoint)) %>%
dplyr::select(-thisPoint) %>%
pull()
return(output)
}
# Map theme for maps
mapTheme <- function(base_size = 12) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = 14,colour = "black"),
plot.subtitle=element_text(face="italic"),
plot.caption=element_text(hjust=0),
plot.background = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank(),axis.title = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.minor = element_blank(),
)
}
# Color for ggplots
## Calgary
c_colors_hex <- c("#4a6fa5", "#dbe9ee")
names(c_colors_hex) <- c("land", "stream")
## Denver
d_colors_hex <- c("#4f6d7a", "#c0d6df")
names(d_colors_hex) <- c("land", "stream")
d_predict_flood<-
Denver_flood %>%
mutate(predict_flood = ifelse(allPredictions>43.8,1,0))
ggplot()+
geom_sf(data=d_predict_flood, aes(fill=factor(predict_flood)),color=NA)+
scale_fill_manual(values = c("grey","darkred"),
labels=c("No Inundation","Inundation"),
name="Flood Prediction")+
mapTheme()
